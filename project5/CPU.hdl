// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a= instruction, b= aluout, sel=instruction[15] , out= Aregister);
    Not(in= instruction[15], out= anad);//adress
    Or(a= anad, b= instruction[5], out= loadrega);//deter if either load or addres
    ARegister(in= Aregister, load= loadrega, out= outAregister,out[0..14]= addressM);
    And(a= instruction[12], b= instruction[15], out= loadmux);//deter if c ins and load
    Mux16(a= outAregister, b= inM, sel= loadmux, out= ALUin);
    And(a= instruction[4], b= instruction[15], out= loadd);//deter if load and c inst
    DRegister(in= aluout, load= loadd, out= data);
    ALU(x= data, y= ALUin, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6],  out= outM,out= aluout, zr= zero, ng= negative);
    And(a= instruction[2], b= negative, out= jumpifneg);
    And(a= instruction[1], b= zero, out= jumpifequal);
    Not(in= negative, out=positiveif );
    Not(in= zero, out= notzero);
    And(a = notzero, b = positiveif, out =positive );
    And(a= instruction[0], b= positive, out= jumpifpositive);
    Or(a= jumpifpositive, b= jumpifequal, out= firstifjump);
    Or(a= jumpifneg, b= firstifjump, out=jumpt );
    Not(in= jumpt, out= notjump);
    And(a= jumpt, b= instruction[15], out= jump);
    PC(in= outAregister, load=jump , inc=true , reset= reset, out[0..14]= pc);
    
    And(a= instruction[15], b= instruction[3], out=writeM );//set writeM
}